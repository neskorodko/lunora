/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¢–∞—Ä–æ - —á–∏—Ç–∞–Ω–Ω—è, —Ä–æ–∑–∫–ª–∞–¥–∏, —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—ó
 * @module modes/tarot
 */

const { Markup } = require('telegraf');
const fs = require('fs');
const path = require('path');
const { deductCoins, logActivity } = require('../helpers/utils');
const { callOpenAI } = require('../helpers/openai');


// –®–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑ –∫–∞—Ä—Ç–∞–º–∏ –¢–ê–†–û
const TAROT_PATH = path.join(__dirname, '../assets/tarot');

// –ú–∞—Å–∏–≤ –∑ —É—Å—ñ–º–∞ –∫–∞—Ä—Ç–∞–º–∏ –¢–ê–†–û (–±—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó)
let tarotCards = [];

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ä—Ç –¢–ê–†–û –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
 */
function loadTarotCards() {
  try {
    if (fs.existsSync(TAROT_PATH)) {
      const files = fs.readdirSync(TAROT_PATH);
      tarotCards = files
        .filter(file => file.endsWith('.jpg'))
        .map(file => {
          const nameWithoutExt = file.replace('.jpg', '');
          const [number, ...nameParts] = nameWithoutExt.split('-');
          const name = nameParts.join('-');
          return {
            id: number,
            name: name,
            file: file,
            path: path.join(TAROT_PATH, file)
          };
        });
      console.log(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${tarotCards.length} –∫–∞—Ä—Ç –¢–ê–†–û`);
    } else {
      console.warn(`–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∑ –∫–∞—Ä—Ç–∞–º–∏ –¢–ê–†–û –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: ${TAROT_PATH}`);
    }
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ä—Ç –¢–ê–†–û:', err);
  }
}

/**
 * –í–∏–±—ñ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∫–∞—Ä—Ç–∏ –¢–ê–†–û
 * @returns {Object|null} –í–∏–ø–∞–¥–∫–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∞–±–æ null, —è–∫—â–æ –∫–∞—Ä—Ç –Ω–µ–º–∞—î
 */
function drawRandomCard() {
  if (tarotCards.length === 0) return null;
  const randomIndex = Math.floor(Math.random() * tarotCards.length);
  return tarotCards[randomIndex];
}

/**
 * –í–∏–±—ñ—Ä –≤–∫–∞–∑–∞–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∫–∞—Ä—Ç –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
 * @param {number} count - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç –¥–ª—è –≤–∏–±–æ—Ä—É
 * @returns {Array} –ú–∞—Å–∏–≤ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∫–∞—Ä—Ç
 */
function drawMultipleCards(count) {
  if (tarotCards.length === 0) return [];
  const cardsCopy = [...tarotCards];
  const selectedCards = [];
  
  for (let i = 0; i < count && cardsCopy.length > 0; i++) {
    const randomIndex = Math.floor(Math.random() * cardsCopy.length);
    selectedCards.push(cardsCopy.splice(randomIndex, 1)[0]);
  }
  
  return selectedCards;
}

/**
 * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É –¢–ê–†–û –¥–ª—è –±–æ—Ç–∞
 * @param {Telegraf} bot - –ï–∫–∑–µ–º–ø–ª—è—Ä Telegraf –±–æ—Ç–∞
 */
function setupTarotMode(bot) {
  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  loadTarotCards();

  // –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¢–ê–†–û
  const tarotMenuKeyboard = Markup.keyboard([
    ['üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è', 'üåô –ü—Ä–æ—Å—Ç–∏–π —Ä–æ–∑–∫–ª–∞–¥'],
    ['üí´ –ö–µ–ª—å—Ç—Å—å–∫–∏–π —Ö—Ä–µ—Å—Ç', 'üíù –õ—é–±–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥'],
    ['üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']
  ]).resize();

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É –¢–ê–†–û
  bot.hears('üé¥ –¢–ê–†–û', async (ctx) => {
    ctx.session.mode = 'tarot';
    await ctx.reply('–í–∏ –≤–∏–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –¢–ê–†–û. –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑–∫–ª–∞–¥—É:', tarotMenuKeyboard);
    logActivity(ctx, '–í—ñ–¥–∫—Ä–∏–≤ —Ä–µ–∂–∏–º –¢–ê–†–û');
  });

  // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
  bot.hears('üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', async (ctx) => {
    ctx.session.mode = null;
    await ctx.reply('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', Markup.keyboard([
      ['üé¥ –¢–ê–†–û', '‚úã –ì–∞–¥–∞–Ω–Ω—è –ø–æ —Ä—É—Ü—ñ'],
      ['‚ú® –ê—Å—Ç—Ä–æ–ª–æ–≥—ñ—è', 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è'],
      ['üí∞ –ë–∞–ª–∞–Ω—Å', 'üõí –ú–∞–≥–∞–∑–∏–Ω']
    ]).resize());
  });

  // –ö–∞—Ä—Ç–∞ –¥–Ω—è - –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ —Ä–∞–∑ –Ω–∞ –¥–æ–±—É
  bot.hears('üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è', async (ctx) => {
    const user = ctx.session.user;
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –±—Ä–∞–≤ –∫–∞—Ä—Ç—É –¥–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ
    if (user.lastDailyCard && user.lastDailyCard >= today) {
      await ctx.reply('–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–ª–∏ –∫–∞—Ä—Ç—É –¥–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ç–∏–ø —Ä–æ–∑–∫–ª–∞–¥—É.');
      return;
    }

    const card = drawRandomCard();
    if (!card) {
      await ctx.reply('–ù–∞ –∂–∞–ª—å, –∫–∞—Ä—Ç–∏ –¢–ê–†–û –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      return;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∫–∞—Ä—Ç–∏ –¥–Ω—è
    user.lastDailyCard = now.getTime();
    
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–∏
      if (fs.existsSync(card.path)) {
        await ctx.replyWithPhoto({ source: card.path }, { caption: `–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è: ${card.name}` });
      } else {
        await ctx.reply(`–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è: ${card.name} (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ)`);
      }

      // –ó–∞–ø–∏—Ç –¥–æ OpenAI –¥–ª—è —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—ó
      await ctx.reply('–û—Ç—Ä–∏–º—É—é —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é –∫–∞—Ä—Ç–∏...');
      const prompt = `–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –¢–∞—Ä–æ. –î–∞–π –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é –∫–∞—Ä—Ç–∏ "${card.name}" —è–∫ –∫–∞—Ä—Ç–∏ –¥–Ω—è. 
      –û–ø–∏—à–∏ —ó—ó –∑–Ω–∞—á–µ–Ω–Ω—è, —Å–∏–º–≤–æ–ª—ñ–∫—É —Ç–∞ —è–∫ –≤–æ–Ω–∞ –º–æ–∂–µ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ —Ä—ñ–∑–Ω—ñ –∞—Å–ø–µ–∫—Ç–∏ –∂–∏—Ç—Ç—è –ª—é–¥–∏–Ω–∏ —Å—å–æ–≥–æ–¥–Ω—ñ. 
      –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏ –Ω–∞ –¥–µ–Ω—å –∑ –æ–≥–ª—è–¥—É –Ω–∞ –µ–Ω–µ—Ä–≥—ñ—é —Ü—ñ—î—ó –∫–∞—Ä—Ç–∏. –ó—Ä–æ–±–∏ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é –≥–ª–∏–±–æ–∫–æ—é, –∞–ª–µ 
      –¥–æ—Å—Ç—É–ø–Ω–æ—é –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è. –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.`;
      
      const interpretation = await callOpenAI(prompt);
      await ctx.reply(interpretation);

      logActivity(ctx, `–û—Ç—Ä–∏–º–∞–≤ –∫–∞—Ä—Ç—É –¥–Ω—è: ${card.name}`);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–∞—Ä—Ç–∏ –¥–Ω—è:', error);
      await ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–∞—Ä—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  });

  // –ü—Ä–æ—Å—Ç–∏–π —Ä–æ–∑–∫–ª–∞–¥ (3 –∫–∞—Ä—Ç–∏) - 2 –º–æ–Ω–µ—Ç–∏
  bot.hears('üåô –ü—Ä–æ—Å—Ç–∏–π —Ä–æ–∑–∫–ª–∞–¥', async (ctx) => {
    const COST = 2;
    
    if (!deductCoins(ctx, COST)) {
      await ctx.reply(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É. –í–∞—Ä—Ç—ñ—Å—Ç—å: ${COST} –º–æ–Ω–µ—Ç. –ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å —É –º–∞–≥–∞–∑–∏–Ω—ñ.`);
      return;
    }

    const cards = drawMultipleCards(3);
    if (cards.length < 3) {
      await ctx.reply('–ù–∞ –∂–∞–ª—å, –∫–∞—Ä—Ç–∏ –¢–ê–†–û –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–Ω–µ—Ç–∏
      ctx.session.user.coins += COST;
      return;
    }

    try {
      await ctx.reply(`–ü—Ä–æ—Å—Ç–∏–π —Ä–æ–∑–∫–ª–∞–¥ "–ú–∏–Ω—É–ª–µ-–¢–µ–ø–µ—Ä—ñ—à–Ω—î-–ú–∞–π–±—É—Ç–Ω—î" (–≤–∏—Ç—Ä–∞—á–µ–Ω–æ ${COST} –º–æ–Ω–µ—Ç):`);
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–Ω—É –∫–∞—Ä—Ç—É –ø–æ —á–µ—Ä–∑—ñ
      for (let i = 0; i < cards.length; i++) {
        const positions = ['–ú–∏–Ω—É–ª–µ', '–¢–µ–ø–µ—Ä—ñ—à–Ω—î', '–ú–∞–π–±—É—Ç–Ω—î'];
        const card = cards[i];
        
        if (fs.existsSync(card.path)) {
          await ctx.replyWithPhoto({ source: card.path }, { caption: `${positions[i]}: ${card.name}` });
        } else {
          await ctx.reply(`${positions[i]}: ${card.name} (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ)`);
        }
      }

      // –ó–∞–ø–∏—Ç –¥–æ OpenAI –¥–ª—è —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—ó
      await ctx.reply('–û—Ç—Ä–∏–º—É—é —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é —Ä–æ–∑–∫–ª–∞–¥—É...');
      const prompt = `–¢–∏ - –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ç–∞—Ä–æ–ª–æ–≥. –ó—Ä–æ–±–∏ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É "–ú–∏–Ω—É–ª–µ-–¢–µ–ø–µ—Ä—ñ—à–Ω—î-–ú–∞–π–±—É—Ç–Ω—î" –∑ —Ç–∞–∫–∏—Ö –∫–∞—Ä—Ç:
      –ú–∏–Ω—É–ª–µ: ${cards[0].name}
      –¢–µ–ø–µ—Ä—ñ—à–Ω—î: ${cards[1].name}
      –ú–∞–π–±—É—Ç–Ω—î: ${cards[2].name}
      
      –î–∞–π –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é –∫–æ–∂–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó —ñ –∑–∞–≥–∞–ª—å–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫ –ø—Ä–æ —Å–∏—Ç—É–∞—Ü—ñ—é –ª—é–¥–∏–Ω–∏. 
      –ü–æ—è—Å–Ω–∏, —è–∫ –∫–∞—Ä—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é—Ç—å –º—ñ–∂ —Å–æ–±–æ—é —Ç–∞ —Å—Ç–≤–æ—Ä—é—é—Ç—å —î–¥–∏–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é. –î–æ–¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏.
      –ó—Ä–æ–±–∏ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é –≥–ª–∏–±–æ–∫–æ—é, –∞–ª–µ –¥–æ—Å—Ç—É–ø–Ω–æ—é –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è. –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.`;
      
      const interpretation = await callOpenAI(prompt);
      await ctx.reply(interpretation);

      logActivity(ctx, '–û—Ç—Ä–∏–º–∞–≤ –ø—Ä–æ—Å—Ç–∏–π —Ä–æ–∑–∫–ª–∞–¥ –¢–ê–†–û');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É:', error);
      await ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–æ–∑–∫–ª–∞–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–Ω–µ—Ç–∏ —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
      ctx.session.user.coins += COST;
    }
  });

  // –ö–µ–ª—å—Ç—Å—å–∫–∏–π —Ö—Ä–µ—Å—Ç (10 –∫–∞—Ä—Ç) - 5 –º–æ–Ω–µ—Ç
  bot.hears('üí´ –ö–µ–ª—å—Ç—Å—å–∫–∏–π —Ö—Ä–µ—Å—Ç', async (ctx) => {
    const COST = 5;
    
    if (!deductCoins(ctx, COST)) {
      await ctx.reply(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è —Ä–æ–∑–∫–ª–∞–¥—É "–ö–µ–ª—å—Ç—Å—å–∫–∏–π —Ö—Ä–µ—Å—Ç". –í–∞—Ä—Ç—ñ—Å—Ç—å: ${COST} –º–æ–Ω–µ—Ç. –ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å —É –º–∞–≥–∞–∑–∏–Ω—ñ.`);
      return;
    }

    const cards = drawMultipleCards(10);
    if (cards.length < 10) {
      await ctx.reply('–ù–∞ –∂–∞–ª—å, –∫–∞—Ä—Ç–∏ –¢–ê–†–û –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–Ω–µ—Ç–∏
      ctx.session.user.coins += COST;
      return;
    }

    try {
      await ctx.reply(`–†–æ–∑–∫–ª–∞–¥ "–ö–µ–ª—å—Ç—Å—å–∫–∏–π —Ö—Ä–µ—Å—Ç" (–≤–∏—Ç—Ä–∞—á–µ–Ω–æ ${COST} –º–æ–Ω–µ—Ç):`);
      
      const positions = [
        '–¢–µ–ø–µ—Ä—ñ—à–Ω—è —Å–∏—Ç—É–∞—Ü—ñ—è',
        '–ü–µ—Ä–µ—à–∫–æ–¥–∞',
        '–ü—ñ–¥—Å–≤—ñ–¥–æ–º–µ, –º–∏–Ω—É–ª–µ',
        '–ù–µ–¥–∞–≤–Ω—î –º–∏–Ω—É–ª–µ',
        '–ù–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
        '–ù–∞–π–±–ª–∏–∂—á–µ –º–∞–π–±—É—Ç–Ω—î',
        '–í–∞—à—ñ —Å—Ç—Ä–∞—Ö–∏ —ñ —Å—É–º–Ω—ñ–≤–∏',
        '–ó–æ–≤–Ω—ñ—à–Ω—ñ –≤–ø–ª–∏–≤–∏',
        '–ù–∞–¥—ñ—ó —ñ —Å–ø–æ–¥—ñ–≤–∞–Ω–Ω—è',
        '–û—Å—Ç–∞—Ç–æ—á–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
      ];

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä—É–ø—É –∫–∞—Ä—Ç (–º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —á–∞—Å)
      for (let i = 0; i < cards.length; i++) {
        const card = cards[i];
        
        if (fs.existsSync(card.path)) {
          await ctx.replyWithPhoto({ source: card.path }, { caption: `${i+1}. ${positions[i]}: ${card.name}` });
        } else {
          await ctx.reply(`${i+1}. ${positions[i]}: ${card.name} (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ)`);
        }
      }

      // –ó–∞–ø–∏—Ç –¥–æ OpenAI –¥–ª—è —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—ó
      await ctx.reply('–û—Ç—Ä–∏–º—É—é –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é —Ä–æ–∑–∫–ª–∞–¥—É "–ö–µ–ª—å—Ç—Å—å–∫–∏–π —Ö—Ä–µ—Å—Ç"...');
      
      let prompt = `–¢–∏ - –º–∞–π—Å—Ç–µ—Ä –¢–∞—Ä–æ –≤–∏—â–æ–≥–æ —Ä—ñ–≤–Ω—è. –î–∞–π —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é —Ä–æ–∑–∫–ª–∞–¥—É "–ö–µ–ª—å—Ç—Å—å–∫–∏–π —Ö—Ä–µ—Å—Ç" –∑ —Ç–∞–∫–∏—Ö –∫–∞—Ä—Ç:
      1. –¢–µ–ø–µ—Ä—ñ—à–Ω—è —Å–∏—Ç—É–∞—Ü—ñ—è: ${cards[0].name}
      2. –ü–µ—Ä–µ—à–∫–æ–¥–∞: ${cards[1].name}
      3. –ü—ñ–¥—Å–≤—ñ–¥–æ–º–µ, –º–∏–Ω—É–ª–µ: ${cards[2].name}
      4. –ù–µ–¥–∞–≤–Ω—î –º–∏–Ω—É–ª–µ: ${cards[3].name}
      5. –ù–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${cards[4].name}
      6. –ù–∞–π–±–ª–∏–∂—á–µ –º–∞–π–±—É—Ç–Ω—î: ${cards[5].name}
      7. –í–∞—à—ñ —Å—Ç—Ä–∞—Ö–∏ —ñ —Å—É–º–Ω—ñ–≤–∏: ${cards[6].name}
      8. –ó–æ–≤–Ω—ñ—à–Ω—ñ –≤–ø–ª–∏–≤–∏: ${cards[7].name}
      9. –ù–∞–¥—ñ—ó —ñ —Å–ø–æ–¥—ñ–≤–∞–Ω–Ω—è: ${cards[8].name}
      10. –û—Å—Ç–∞—Ç–æ—á–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${cards[9].name}
      
      –†–æ–∑–±–∏–π —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é –Ω–∞ —Ä–æ–∑–¥—ñ–ª–∏ –∑–∞ –ø–æ–∑–∏—Ü—ñ—è–º–∏. –ü–æ—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ä—Ç–∏ —É —Å–≤–æ—ó–π –ø–æ–∑–∏—Ü—ñ—ó.
      –í –∫—ñ–Ω—Ü—ñ –∑—Ä–æ–±–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫ –ø—Ä–æ —Å–∏—Ç—É–∞—Ü—ñ—é —Ç–∞ –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏.
      –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –¥–µ—Ç–∞–ª—å–Ω–æ, –∞–ª–µ –¥–æ—Å—Ç—É–ø–Ω–æ.`;
      
      const interpretation = await callOpenAI(prompt);
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é —á–∞—Å—Ç–∏–Ω–∞–º–∏ —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è Telegram
      const maxLength = 4000;
      for (let i = 0; i < interpretation.length; i += maxLength) {
        await ctx.reply(interpretation.substring(i, i + maxLength));
      }

      logActivity(ctx, '–û—Ç—Ä–∏–º–∞–≤ —Ä–æ–∑–∫–ª–∞–¥ "–ö–µ–ª—å—Ç—Å—å–∫–∏–π —Ö—Ä–µ—Å—Ç"');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ "–ö–µ–ª—å—Ç—Å—å–∫–æ–≥–æ —Ö—Ä–µ—Å—Ç–∞":', error);
      await ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–æ–∑–∫–ª–∞–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–Ω–µ—Ç–∏ —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
      ctx.session.user.coins += COST;
    }
  });

  // –õ—é–±–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ (5 –∫–∞—Ä—Ç) - 3 –º–æ–Ω–µ—Ç–∏
  bot.hears('üíù –õ—é–±–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥', async (ctx) => {
    const COST = 3;
    
    if (!deductCoins(ctx, COST)) {
      await ctx.reply(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è "–õ—é–±–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É". –í–∞—Ä—Ç—ñ—Å—Ç—å: ${COST} –º–æ–Ω–µ—Ç. –ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å —É –º–∞–≥–∞–∑–∏–Ω—ñ.`);
      return;
    }

    const cards = drawMultipleCards(5);
    if (cards.length < 5) {
      await ctx.reply('–ù–∞ –∂–∞–ª—å, –∫–∞—Ä—Ç–∏ –¢–ê–†–û –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–Ω–µ—Ç–∏
      ctx.session.user.coins += COST;
      return;
    }

    try {
      await ctx.reply(`"–õ—é–±–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥" (–≤–∏—Ç—Ä–∞—á–µ–Ω–æ ${COST} –º–æ–Ω–µ—Ç):`);
      
      const positions = [
        '–í–∏',
        '–ü–∞—Ä—Ç–Ω–µ—Ä/–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä',
        '–í–∞—à—ñ –ø–æ—á—É—Ç—Ç—è',
        '–á—Ö–Ω—ñ –ø–æ—á—É—Ç—Ç—è',
        '–†–µ–∑—É–ª—å—Ç–∞—Ç/—Ä–æ–∑–≤–∏—Ç–æ–∫ –≤—ñ–¥–Ω–æ—Å–∏–Ω'
      ];

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–∞—Ä—Ç–∏
      for (let i = 0; i < cards.length; i++) {
        const card = cards[i];
        
        if (fs.existsSync(card.path)) {
          await ctx.replyWithPhoto({ source: card.path }, { caption: `${positions[i]}: ${card.name}` });
        } else {
          await ctx.reply(`${positions[i]}: ${card.name} (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ)`);
        }
      }

      // –ó–∞–ø–∏—Ç –¥–æ OpenAI –¥–ª—è —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—ó
      await ctx.reply('–û—Ç—Ä–∏–º—É—é –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é "–õ—é–±–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É"...');
      
      const prompt = `–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –ª—é–±–æ–≤–Ω–∏—Ö —Ä–æ–∑–∫–ª–∞–¥—ñ–≤ –¢–∞—Ä–æ. –î–∞–π —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—é "–õ—é–±–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É" –∑ —Ç–∞–∫–∏—Ö –∫–∞—Ä—Ç:
      1. –í–∏: ${cards[0].name}
      2. –ü–∞—Ä—Ç–Ω–µ—Ä/–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä: ${cards[1].name}
      3. –í–∞—à—ñ –ø–æ—á—É—Ç—Ç—è: ${cards[2].name}
      4. –á—Ö–Ω—ñ –ø–æ—á—É—Ç—Ç—è: ${cards[3].name}
      5. –†–µ–∑—É–ª—å—Ç–∞—Ç/—Ä–æ–∑–≤–∏—Ç–æ–∫ –≤—ñ–¥–Ω–æ—Å–∏–Ω: ${cards[4].name}
      
      –ü–æ—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ä—Ç–∏ —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –ª—é–±–æ–≤–Ω–∏—Ö –≤—ñ–¥–Ω–æ—Å–∏–Ω.
      –†–æ–∑–∫—Ä–∏–π –≥–ª–∏–±–∏–Ω–Ω—É –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—é –æ–±–æ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Ä—Ç.
      –î–∞–π –ø—Ä–æ–≥–Ω–æ–∑ —Ä–æ–∑–≤–∏—Ç–∫—É –≤—ñ–¥–Ω–æ—Å–∏–Ω —ñ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏ –¥–ª—è —ó—Ö –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è.
      –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –≥–ª–∏–±–æ–∫–æ, –∞–ª–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ.`;
      
      const interpretation = await callOpenAI(prompt);
      await ctx.reply(interpretation);

      logActivity(ctx, '–û—Ç—Ä–∏–º–∞–≤ "–õ—é–±–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥"');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ "–õ—é–±–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É":', error);
      await ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–æ–∑–∫–ª–∞–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–Ω–µ—Ç–∏ —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
      ctx.session.user.coins += COST;
    }
  });

  // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —â–æ–¥–µ–Ω–Ω—É –∫–∞—Ä—Ç—É –¢–ê–†–û
  bot.command('subscribe_daily', async (ctx) => {
    const user = ctx.session.user;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π
    if (user.subscriptions && user.subscriptions.dailyTarot) {
      await ctx.reply('–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —â–æ–¥–µ–Ω–Ω—É –∫–∞—Ä—Ç—É –¢–ê–†–û. –©–æ–± –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unsubscribe_daily');
      return;
    }
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–ø–∏—Å–æ–∫, —è–∫—â–æ —Ü–µ –ø–µ—Ä—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (!user.subscriptions) {
      user.subscriptions = {};
    }
    
    // –í–∞—Ä—Ç—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ - 10 –º–æ–Ω–µ—Ç –Ω–∞ –º—ñ—Å—è—Ü—å
    const SUBSCRIPTION_COST = 10;
    
    if (!deductCoins(ctx, SUBSCRIPTION_COST)) {
      await ctx.reply(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏. –í–∞—Ä—Ç—ñ—Å—Ç—å: ${SUBSCRIPTION_COST} –º–æ–Ω–µ—Ç –Ω–∞ –º—ñ—Å—è—Ü—å. –ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å —É –º–∞–≥–∞–∑–∏–Ω—ñ.`);
      return;
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏
    const now = new Date();
    const expiryDate = new Date();
    expiryDate.setMonth(expiryDate.getMonth() + 1); // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º—ñ—Å—è—Ü—å
    
    user.subscriptions.dailyTarot = {
      active: true,
      subscribedAt: now.getTime(),
      expiresAt: expiryDate.getTime()
    };
    
    await ctx.reply(`–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—É –∫–∞—Ä—Ç—É –¢–ê–†–û! –í–∞—Ä—Ç—ñ—Å—Ç—å: ${SUBSCRIPTION_COST} –º–æ–Ω–µ—Ç.
    
–ö–æ–∂–Ω–æ–≥–æ —Ä–∞–Ω–∫—É –æ 8:00 –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç—É –¥–Ω—è –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—î—é.
    
–ü—ñ–¥–ø–∏—Å–∫–∞ –¥—ñ–π—Å–Ω–∞ –¥–æ: ${expiryDate.toLocaleDateString()}
    
–©–æ–± –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unsubscribe_daily`);
    
    logActivity(ctx, '–ü—ñ–¥–ø–∏—Å–∞–≤—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—É –∫–∞—Ä—Ç—É –¢–ê–†–û');
  });
  
  // –í—ñ–¥–ø–∏—Å–∫–∞ –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–æ—ó –∫–∞—Ä—Ç–∏ –¢–ê–†–û
  bot.command('unsubscribe_daily', async (ctx) => {
    const user = ctx.session.user;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π
    if (!user.subscriptions || !user.subscriptions.dailyTarot || !user.subscriptions.dailyTarot.active) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —â–æ–¥–µ–Ω–Ω—É –∫–∞—Ä—Ç—É –¢–ê–†–û.');
      return;
    }
    
    // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏
    user.subscriptions.dailyTarot.active = false;
    
    await ctx.reply('–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–æ—ó –∫–∞—Ä—Ç–∏ –¢–ê–†–û. –í–∏ –º–æ–∂–µ—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –∑–Ω–æ–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /subscribe_daily');
    
    logActivity(ctx, '–í—ñ–¥–ø–∏—Å–∞–≤—Å—è –≤—ñ–¥ —â–æ–¥–µ–Ω–Ω–æ—ó –∫–∞—Ä—Ç–∏ –¢–ê–†–û');
  });
}

module.exports = {
  setupTarotMode,
  drawRandomCard,
  drawMultipleCards
};
